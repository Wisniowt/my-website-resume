{"version":3,"sources":["corn.jpg","daniel.jpg","Components/MyNavbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyNavbar","Navbar","collapseOnSelect","className","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","React","Component","App","class","src","Daniel","alt","style","width","type","duration","activeItem","length","showControls","showIndicators","slide","itemId","Cornflakes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,oRCMtBC,G,6KAEb,OACI,kBAACC,EAAA,EAAD,CACIC,kBAAgB,EAChBC,UAAU,YACVC,OAAO,KAEPC,QAAQ,QAER,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,gBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKT,UAAU,WACX,kBAACS,EAAA,EAAIC,KAAL,CAAUN,KAAK,cAAf,aACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,eAAf,qB,GAfcO,IAAMC,Y,uDC8F7BC,MA/Ef,WACI,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKC,MAAM,yBACP,yBAAKA,MAAM,6BACX,yBAAKA,MAAM,wBACP,yBACIC,IAAKC,IACLF,MAAM,iBACNG,IAAI,eACJC,MAAO,CAAEC,MAAO,YAGxB,yBAAKL,MAAM,aACP,kBAAC,IAAD,KACI,yBAAKA,MAAM,eACP,kBAAC,IAAD,CAAcM,KAAK,SAASC,SAAS,MACjC,uBAAGrB,UAAU,cAAb,cAGJ,kBAAC,IAAD,CAAcoB,KAAK,SAASC,SAAS,OACjC,uBAAGrB,UAAU,iBAAb,gBACA,8BAEJ,kBAAC,IAAD,CAAcoB,KAAK,SAASC,SAAS,OACjC,iFAQhB,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,WAAY,EACZC,OAAQ,EACRC,cAAc,EACdC,gBAAgB,EAChBzB,UAAU,YACV0B,OAAK,GAEL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAiBC,OAAO,KACpB,kBAAC,IAAD,KACI,yBACI3B,UAAU,gBACVe,IAAKa,IACLX,IAAI,kBAIhB,kBAAC,IAAD,CAAiBU,OAAO,KACpB,kBAAC,IAAD,KACI,yBACI3B,UAAU,gBACVe,IAAKa,IACLX,IAAI,mBAIhB,kBAAC,IAAD,CAAiBU,OAAO,KACpB,kBAAC,IAAD,KACI,yBACI3B,UAAU,gBACVe,IAAKa,IACLX,IAAI,wBC5ExBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cbc6833.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corn.36e1ac10.jpg\";","module.exports = __webpack_public_path__ + \"static/media/daniel.21ceaa85.jpg\";","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport \"../Style/Navbar.css\";\r\n\r\nexport default class MyNavbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar\r\n                collapseOnSelect\r\n                className=\"color-nav\"\r\n                expand=\"lg\"\r\n                // bg=\"dark\"\r\n                variant=\"dark\"\r\n            >\r\n                <Navbar.Brand href=\"#home\">Daniel Tryba</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#Education\">Education</Nav.Link>\r\n                        <Nav.Link href=\"#Experiance\">Experiance</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.css\";\nimport MyNavbar from \"./Components/MyNavbar\";\nimport Button from \"react-bootstrap/Button\";\nimport Fade from \"react-bootstrap/Fade\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Style/name.css\";\nimport Daniel from \"../src/daniel.jpg\";\nimport Cornflakes from \"../src/corn.jpg\";\nimport {\n    MDBAnimation,\n    MDBContainer,\n    MDBRow,\n    MDBCol,\n    MDBCarousel,\n    MDBCarouselInner,\n    MDBCarouselItem,\n    MDBView,\n} from \"mdbreact\";\n\nfunction App() {\n    return (\n        <div>\n            <MyNavbar />\n            <div class=\"card testimonial-card\">\n                <div class=\"card-up indigo lighten-1\"></div>\n                <div class=\"avatar mx-auto white\">\n                    <img\n                        src={Daniel}\n                        class=\"rounded-circle\"\n                        alt=\"woman avatar\"\n                        style={{ width: \"300px\" }}\n                    />\n                </div>\n                <div class=\"card-body\">\n                    <MDBContainer>\n                        <div class=\"text-center\">\n                            <MDBAnimation type=\"fadeIn\" duration=\"3s\">\n                                <p className=\"bigItalics\"> HEY, I'm</p>\n                            </MDBAnimation>\n\n                            <MDBAnimation type=\"fadeIn\" duration=\"10s\">\n                                <p className=\"biggerItalics\">Daniel Tryba</p>\n                                <hr />\n                            </MDBAnimation>\n                            <MDBAnimation type=\"fadeIn\" duration=\"12s\">\n                                <p>\n                                    Husband, Brother-In-Law, Plumber,\n                                    Photographer\n                                </p>\n                            </MDBAnimation>\n                        </div>\n                    </MDBContainer>\n                </div>\n                <MDBContainer>\n                    <MDBCarousel\n                        activeItem={1}\n                        length={3}\n                        showControls={true}\n                        showIndicators={false}\n                        className=\"z-depth-1\"\n                        slide\n                    >\n                        <MDBCarouselInner>\n                            <MDBCarouselItem itemId=\"1\">\n                                <MDBView>\n                                    <img\n                                        className=\"d-block w-100\"\n                                        src={Cornflakes}\n                                        alt=\"First slide\"\n                                    />\n                                </MDBView>\n                            </MDBCarouselItem>\n                            <MDBCarouselItem itemId=\"2\">\n                                <MDBView>\n                                    <img\n                                        className=\"d-block w-100\"\n                                        src={Cornflakes}\n                                        alt=\"Second slide\"\n                                    />\n                                </MDBView>\n                            </MDBCarouselItem>\n                            <MDBCarouselItem itemId=\"3\">\n                                <MDBView>\n                                    <img\n                                        className=\"d-block w-100\"\n                                        src={Cornflakes}\n                                        alt=\"Third slide\"\n                                    />\n                                </MDBView>\n                            </MDBCarouselItem>\n                        </MDBCarouselInner>\n                    </MDBCarousel>\n                </MDBContainer>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}